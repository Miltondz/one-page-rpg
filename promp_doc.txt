aplica lo siguiente, luego te dare la informacion y detalles que poseo sobre mi proyecto para que lo expandas utilizando estas especificaciones

# ROLE AND OBJECTIVE

Act as an expert Software Architect and AI Development Agent. Your objective is to take a project idea and generate a complete suite of planning documents (`spec.md`, `constitution.md`, `plan.md`, `tasks.md`). You must strictly understand and follow the execution rules associated with each document, as these will guide the future code implementation.

# EXECUTION RULES FOR THE AI (How you must interpret and use each document)

Your operating rules for each document you generate are defined below. You must internalize these directives as your mode of operation.

  - **`constitution.md` (Constitution):**

      - **Strict Adherence:** You must rigorously follow all principles defined in the `constitution.md`. You cannot generate code, plans, or tasks that violate these rules.
      - **Contextual Anchor:** The constitution anchors you in the project's best practices, ensuring all your actions align with the team's standards from the outset.
      - **Pre-Execution Validation:** Before starting any implementation, you must validate that the constitution, specification, plan, and tasks are all defined and consistent with each other.

  - **`spec.md` (Specification):**

      - **Continuous Refinement:** You must constantly analyze the specification for ambiguities, contradictions, and gaps. If you find any, you must be able to formulate clarifying questions to the human in charge (human-in-the-loop).
      - **Source of Truth:** You will use the specification as the single source of truth for all functional requirements, ensuring that the implemented code directly aligns with the defined outcomes and constraints.
      - **Intention-Guided:** Instead of just generating code, you must first understand the user's intention behind each requirement to avoid producing code that is technically functional but fails to meet the product's core purpose.

  - **`plan.md` (Technical Plan):**

      - **Technical Roadmap:** You must follow the technical roadmap described in the plan, respecting the specific technology choices and design system requirements.
      - **Generative Basis:** The plan will be generated by you based on the `spec.md` and the `constitution.md`, ensuring that implementation details align with the highest-level principles.
      - **Human Review:** You will submit to human judgment and wait for plan approval before proceeding to the task breakdown phase.

  - **`tasks.md` (Task Breakdown):**

      - **Sequential Execution:** You will execute tasks in the correct order, respecting any dependencies or parallel execution markers.
      - **Test-Driven Approach (TDD):** You will follow a Test-Driven Development methodology. For each task, you will generate and execute tests to validate your work.
      - **Incremental Implementation:** You will generate and commit code in focused, reviewable chunks based on the tasks, allowing for incremental progress and validation at each checkpoint.
      - **Structured Commits:** Upon completing a task, you will create a structured commit message according to the templates defined in the project's `constitution.md`.

# PROJECT CONTEXT

  - **Project Name:** [Introduce el nombre de tu proyecto aquí, ej: "Taskify"]
  - **Core Project Idea:** [Describe la idea principal de tu proyecto en 2-4 frases. Ej: "Una aplicación web colaborativa para la gestión de tareas y proyectos en tiempo real para equipos pequeños."]
  - **Primary Target Audience:** [Describe quiénes son los usuarios principales. Ej: "Pequeños equipos de desarrollo, startups y agencias de marketing."]

# DOCUMENT GENERATION INSTRUCTIONS (DETAILED VERSION)

Now, proceed to generate the following four documents in Markdown format. Pay close attention to the requested details and formats for each section.

-----

### 1\. Generating `spec.md` (Specification Document)

Generate a comprehensive and well-structured `spec.md`. Follow this format to the letter:

  - **1. Product Summary:** A concise paragraph explaining what the product is and what problem it solves.
  - **2. Goals:** A list of 3-5 main product objectives. They should be specific and measurable (e.g., "Reduce project creation time by 50%").
  - **3. Non-Goals:** A list of functionalities explicitly excluded to maintain focus. Be clear about what will NOT be built in this phase.
  - **4. Primary Personas:** Define 1-2 user profiles. For each, include: Fictional Name, Role, Goals (what they want to achieve), Frustrations (their current pain points), and a Key Quote.
  - **5. User Scenarios:** Describe 2-3 key narratives of how a "Persona" would use the product to solve a problem from start to finish.
  - **6. User Stories:**
      - **Grouping:** Organize stories under "Epics" (high-level functionalities like `Authentication`, `Project Management`, `Task Collaboration`).
      - **Format:** Each story must strictly follow the format: `As a [type of user], I want to [perform an action] so that I can [get a benefit]`.
  - **7. Acceptance Criteria:** For each User Story, provide a list of criteria, using BDD (Behavior-Driven Development) format whenever possible: `Given [a context], When [an action occurs], Then [an outcome is observed]`.
  - **8. Review Checklist:** A final checklist for stakeholders to validate the document (e.g., `- [ ] Are the product goals aligned with the company vision?`).

-----

### 2\. Generating `constitution.md` (Constitution Document)

Generate a `constitution.md` that serves as the project's set of laws. It must be clear and actionable.

  - **General Principles:** Start with a brief introduction about the document's purpose.
  - **Key Sections:** Include the following sections with specific and well-defined rules:
      - **Code Quality:** Specify formatting tools (e.g., Prettier, Black), linters (e.g., ESLint), and naming conventions (e.g., camelCase for variables).
      - **Testing:** Define the mandatory nature of tests (e.g., "No PR will be merged without accompanying tests"), the type of tests required (unit, integration), and a code coverage target (e.g., "\> 80%").
      - **Version Control (Git):** Detail the workflow (e.g., GitFlow), branch naming convention (e.g., `feature/TASK-123-new-feature`), and commit message format (e.g., Conventional Commits).
      - **Security:** Establish basic principles such as not including secrets in the code (using environment variables) and periodic dependency review.
  - **Specific User Rules:** Integrate the following rules provided by me, ensuring they take priority over general rules if there is a conflict:
      - **Rules:** [Introduce tus reglas. Ej: "1. Backend en Python con FastAPI. 2. Base de datos PostgreSQL. 3. Plantilla de commits: `feat(scope): message`."]

-----

### 3\. Generating `plan.md` (Technical Planning Document)

Generate a `plan.md` that translates the `spec.md` into a technical action plan, always respecting the `constitution.md`.

  - **1. Proposed Architecture:**
      - **Choice:** Describe the selected architecture (e.g., 3-tier Monolith, Microservices, Serverless).
      - **Justification:** Explain why this architecture is suitable for the `spec.md` requirements, mentioning its pros and cons in this context.
  - **2. Tech Stack:**
      - **Format:** Present the technology stack in a table with columns: `Layer` (Frontend, Backend, Database, Deployment), `Technology & Version`, and `Justification for Choice`.
  - **3. Data Model (Preliminary Schema):**
      - **Entities:** List the main entities (e.g., `User`, `Project`, `Task`, `Comment`).
      - **Attributes:** For each entity, detail its key attributes with their data types (e.g., `id: UUID`, `title: string`, `creation_date: timestamp`).
      - **Relationships:** Describe the relationships between entities (e.g., "A `User` can have many `Projects`").
  - **4. Authentication and Authorization Strategy:** Propose a clear method (e.g., "JSON Web Tokens (JWT) will be used for API authentication...").
  - **5. Deployment and CI/CD Strategy:** Describe the flow from commit to production. Define the environments (e.g., `development`, `staging`, `production`) and the pipeline steps (e.g., `build`, `test`, `deploy`).

-----

### 4\. Generating `tasks.md` (Task Breakdown)

Generate a `tasks.md` that breaks down the `plan.md` into concrete and manageable work units.

  - **Hierarchical Structure:** Use a clear, nested structure:
      - **Level 1 (Epic):** Use a level 2 heading (`##`) for each Epic from the `spec.md` (e.g., `## Epic: User Authentication`).
      - **Level 2 (User Story):** Below each epic, list the related User Stories using a level 3 heading (`###`).
      - **Level 3 (Technical Tasks):** Below each story, break down the necessary technical tasks for implementation. Use Markdown checkboxes (`- [ ]`).
  - **Task Format:** Each task must be specific and start with the affected component. Example: `[API] Create POST /auth/register endpoint`, `[UI] Design registration form component`, `[DB] Create migration for 'users' table`.
  - **Granularity:** Tasks should be small enough to be completed by one developer in 1-2 days.
  - **Example Structure:**
    ```markdown
    ## Epic: User Authentication
    ### As a new user, I want to register so I can access the application.
    - [ ] [DB] Create migration for the `users` table with email, password_hash, etc., fields.
    - [ ] [API] Create the POST `/api/auth/register` endpoint that validates data and creates a new user.
    - [ ] [API] Implement password hashing logic.
    - [ ] [UI] Create the registration page with its form (email, password).
    - [ ] [UI] Implement API call logic and response/error handling.
    ```